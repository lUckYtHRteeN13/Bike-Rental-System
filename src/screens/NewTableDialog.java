/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package screens;

import java.awt.Component;
import java.awt.Point;
import java.util.ArrayList;
import java.util.Vector;
import javax.swing.DefaultCellEditor;
import javax.swing.JCheckBox;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;

/**
 *
 * @author Jael PC
 */
public class NewTableDialog extends javax.swing.JDialog {
    private int initialPointerX;
    private int initialPointerY;
    private final DefaultTableModel model;
    private final ListSelectionModel listSelectionModel;
    private int RETURN_VALUE;
    private ArrayList headers;
    
    /**
     * Creates new form NewJDialog
     */
    public NewTableDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
                
        this.model = (DefaultTableModel) this.tableOfHeaders.getModel();
        this.tableOfHeaders.getColumnModel().getColumn(1).setCellRenderer(new CheckboxRenderer());
        this.tableOfHeaders.getColumnModel().getColumn(1).setCellEditor(new CheckboxEditor());
        
        this.tableOfHeaders.getColumnModel().getColumn(2).setCellRenderer(new CheckboxRenderer());
        this.tableOfHeaders.getColumnModel().getColumn(2).setCellEditor(new CheckboxEditor());
        
        this.listSelectionModel = this.tableOfHeaders.getSelectionModel();
        this.listSelectionModel.addListSelectionListener(this::rowSelectedPerformed);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tableOfHeaders = new javax.swing.JTable();
        addRowBtn = new javax.swing.JButton();
        confirmBtn = new javax.swing.JButton();
        cancelBtn = new javax.swing.JButton();
        removeRowBtn = new javax.swing.JButton();
        moveUpButton = new javax.swing.JButton();
        moveDownButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setAlwaysOnTop(true);
        setModal(true);
        setUndecorated(true);
        setPreferredSize(new java.awt.Dimension(440, 300));
        setResizable(false);
        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                formMouseDragged(evt);
            }
        });
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
        });
        getContentPane().setLayout(null);

        tableOfHeaders.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title", "Unique", "Sorter"
            }
        ));
        tableOfHeaders.setSelectionForeground(new java.awt.Color(0, 0, 0));
        tableOfHeaders.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tableOfHeaders.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tableOfHeaders.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tableOfHeaders);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(10, 10, 380, 240);

        addRowBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/Add.png"))); // NOI18N
        addRowBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addRowBtnActionPerformed(evt);
            }
        });
        getContentPane().add(addRowBtn);
        addRowBtn.setBounds(400, 40, 30, 30);

        confirmBtn.setText("Confirm");
        confirmBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmBtnActionPerformed(evt);
            }
        });
        getContentPane().add(confirmBtn);
        confirmBtn.setBounds(220, 260, 100, 30);

        cancelBtn.setText("Cancel");
        cancelBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelBtnActionPerformed(evt);
            }
        });
        getContentPane().add(cancelBtn);
        cancelBtn.setBounds(330, 260, 100, 30);

        removeRowBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/Remove.png"))); // NOI18N
        removeRowBtn.setEnabled(false);
        removeRowBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeRowBtnActionPerformed(evt);
            }
        });
        getContentPane().add(removeRowBtn);
        removeRowBtn.setBounds(400, 80, 30, 30);

        moveUpButton.setEnabled(false);
        moveUpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveUpButtonActionPerformed(evt);
            }
        });
        getContentPane().add(moveUpButton);
        moveUpButton.setBounds(400, 120, 30, 30);

        moveDownButton.setEnabled(false);
        moveDownButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveDownButtonActionPerformed(evt);
            }
        });
        getContentPane().add(moveDownButton);
        moveDownButton.setBounds(400, 160, 30, 30);

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(153, 153, 153), new java.awt.Color(102, 102, 102)));
        getContentPane().add(jPanel1);
        jPanel1.setBounds(0, 0, 440, 300);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    public int getValue() {
        
        return this.RETURN_VALUE;
        
    }
    
    public Object[] getHeaders() {
        
        return this.headers.toArray();
        
    }
    
    private void rowSelectedPerformed(ListSelectionEvent e) {
        
        ListSelectionModel lsm = (ListSelectionModel)e.getSource();
        
        if (!lsm.isSelectionEmpty()) {
            int minIndex = lsm.getMinSelectionIndex();
            int maxIndex = lsm.getMaxSelectionIndex();
            
            this.moveDownButton.setEnabled(this.model.getRowCount() - 1 > maxIndex);
            this.moveUpButton.setEnabled(minIndex > 0);
            
        } else {
            this.moveDownButton.setEnabled(false);
            this.moveUpButton.setEnabled(false);
        }
        
    }
    
    private void addRowBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addRowBtnActionPerformed

        if (this.tableOfHeaders.getRowCount() < 10) {
            this.model.addRow(new Object[]{"null", Boolean.FALSE, Boolean.FALSE});

        } else {
            JOptionPane.showMessageDialog(this, "Reached maximum number of headers", "Information", JOptionPane.INFORMATION_MESSAGE);
        }
        this.removeRowBtn.setEnabled(true);

    }//GEN-LAST:event_addRowBtnActionPerformed

    private void cancelBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelBtnActionPerformed

        this.RETURN_VALUE = -1;
        this.headers = null;
        this.dispose();
        
    }//GEN-LAST:event_cancelBtnActionPerformed

    private void confirmBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmBtnActionPerformed

        this.RETURN_VALUE = 0;
        this.headers = new ArrayList<>();
        
        for (int i = 0; i < this.model.getDataVector().toArray().length; i++) {
            this.headers.add(((Vector)this.model.getDataVector().elementAt(i)).elementAt(0).toString());
        }
        
        if (this.model.getDataVector().toArray().length == 0) {
            JOptionPane.showMessageDialog(this, "Cannot create empty table", "Information", JOptionPane.INFORMATION_MESSAGE);
            this.RETURN_VALUE = -1;
        } else {
            this.dispose();
        }
        
    }//GEN-LAST:event_confirmBtnActionPerformed

    private void removeRowBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeRowBtnActionPerformed

        if (-1 == this.tableOfHeaders.getSelectedRow()) {
            this.model.removeRow(this.tableOfHeaders.getRowCount()-1);
        } else {
            this.model.removeRow(this.tableOfHeaders.getSelectedRow());
        }

        if (0 >= tableOfHeaders.getRowCount()) {
            this.removeRowBtn.setEnabled(false);
        }

    }//GEN-LAST:event_removeRowBtnActionPerformed

    private void moveUpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveUpButtonActionPerformed

        int selectedRowIndex = this.tableOfHeaders.getSelectedRow();
        this.model.moveRow(selectedRowIndex, selectedRowIndex, selectedRowIndex-1);
        this.tableOfHeaders.setRowSelectionInterval(selectedRowIndex - 1, selectedRowIndex - 1);

    }//GEN-LAST:event_moveUpButtonActionPerformed

    private void moveDownButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveDownButtonActionPerformed

        int selectedRowIndex = this.tableOfHeaders.getSelectedRow();
        this.model.moveRow(selectedRowIndex, selectedRowIndex, selectedRowIndex+1);
        this.tableOfHeaders.setRowSelectionInterval(selectedRowIndex + 1, selectedRowIndex + 1);

    }//GEN-LAST:event_moveDownButtonActionPerformed

    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
        
        this.initialPointerX = evt.getX();
        this.initialPointerY = evt.getY();
        
    }//GEN-LAST:event_formMousePressed

    private void formMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseDragged
        
        int x, y;

        Point location = this.getLocation();
        y = location.y - this.initialPointerY + evt.getY();
        x = location.x - this.initialPointerX + evt.getX();
        this.setLocation(x, y);
        
    }//GEN-LAST:event_formMouseDragged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewTableDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewTableDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewTableDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewTableDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                NewTableDialog dialog = new NewTableDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addRowBtn;
    private javax.swing.JButton cancelBtn;
    private javax.swing.JButton confirmBtn;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton moveDownButton;
    private javax.swing.JButton moveUpButton;
    private javax.swing.JButton removeRowBtn;
    private javax.swing.JTable tableOfHeaders;
    // End of variables declaration//GEN-END:variables


    class CheckboxRenderer extends JCheckBox implements TableCellRenderer {
        public CheckboxRenderer() {
            setHorizontalAlignment(JCheckBox.CENTER);
            setBackground(null);
            setOpaque(true);
//            this.setRolloverEnabled(false);
            setContentAreaFilled(false);
        }

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            setSelected((value != null) && (Boolean) value);
            return this;
        }
    }

    class CheckboxEditor extends DefaultCellEditor {
        private JCheckBox checkBox;

        public CheckboxEditor() {
            super(new JCheckBox());
            checkBox = (JCheckBox) getComponent();
            checkBox.setHorizontalAlignment(JCheckBox.CENTER);
            checkBox.setOpaque(true);
            checkBox.setContentAreaFilled(false);
//            checkBox.setBackground(null);
//            checkBox.setBorderPainted(false);
        }

        @Override
        public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int row, int column) {
            checkBox.setSelected((value != null) && (Boolean) value);
            return checkBox;
        }
    }
}
