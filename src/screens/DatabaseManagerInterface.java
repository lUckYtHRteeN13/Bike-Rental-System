/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package screens;

import filemanagement.FileManager;
import java.awt.Component;
import java.awt.Window;
import java.io.File;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.Vector;
import javax.swing.Box;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Jael PC
 */
public class DatabaseManagerInterface extends javax.swing.JFrame {

    private final JLabel titleLabel;
    private FileManager fileManager;
    private File file, data_path;
    private CustomTableModel model;
    private ArrayList<Object[]> data, visibleData;
    private Object[] headers;
    private boolean SEARCHING = false, LOADING = false, ADDING = false, is_new = false, is_unsaved = false;
    private String searchFilter;
    private int searchCol;

    /**
     * Creates new form DatabaseManagerInterface
     */
    public DatabaseManagerInterface() {
        this.model = new CustomTableModel();
        initComponents();
        
        this.model.addTableModelListener(this::tableChangedPerformed);
        
        this.titleLabel = new JLabel();
        this.titleLabel.setText("Record Manager");
        
        this.menuBar.add(Box.createHorizontalGlue());
        this.menuBar.add(titleLabel);
        this.menuBar.add(Box.createHorizontalGlue());
        this.titleLabel.setHorizontalAlignment(SwingConstants.CENTER);
        
        this.data_path = new File("./Data");
        
        if (!this.data_path.exists()) {
            this.data_path.mkdir();
        }
        
        this.file = new File(this.data_path, "Untitled.txt");
        this.fileManager = new FileManager(file);
        
        this.fileChooser.addChoosableFileFilter(new FileNameExtensionFilter("Text File (.txt)", "txt"));
        this.fileChooser.setAcceptAllFileFilterUsed(false);
        this.fileChooser.setCurrentDirectory(this.data_path);
        
        this.visibleData = new ArrayList<>();
        this.data = new ArrayList<>();
        this.searchFilter = "";
        this.searchCol = 0;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileChooser = new javax.swing.JFileChooser();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        addRow = new javax.swing.JButton();
        removeBtn = new javax.swing.JButton();
        editContentBtn = new javax.swing.JButton();
        searchBtn = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        newFileBtn = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        openBtn = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        saveBtn = new javax.swing.JMenuItem();
        saveAsBtn = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        jMenuItem4 = new javax.swing.JMenuItem();

        fileChooser.setDialogType(javax.swing.JFileChooser.SAVE_DIALOG);

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(750, 500));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        getContentPane().setLayout(null);

        jTable1.setAutoCreateRowSorter(true);
        jTable1.setModel(this.model);
        jTable1.setNextFocusableComponent(addRow);
        jTable1.setShowGrid(false);
        jTable1.getTableHeader().setReorderingAllowed(false);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTable1MouseReleased(evt);
            }
        });
        jTable1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTable1KeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(20, 10, 660, 410);

        addRow.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/Add.png"))); // NOI18N
        addRow.setEnabled(false);
        addRow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addRowActionPerformed(evt);
            }
        });
        getContentPane().add(addRow);
        addRow.setBounds(690, 60, 30, 30);

        removeBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/Remove.png"))); // NOI18N
        removeBtn.setEnabled(false);
        removeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeBtnActionPerformed(evt);
            }
        });
        getContentPane().add(removeBtn);
        removeBtn.setBounds(690, 100, 30, 30);

        editContentBtn.setEnabled(false);
        editContentBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editContentBtnActionPerformed(evt);
            }
        });
        getContentPane().add(editContentBtn);
        editContentBtn.setBounds(690, 140, 30, 30);

        searchBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/Search.png"))); // NOI18N
        searchBtn.setEnabled(false);
        searchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBtnActionPerformed(evt);
            }
        });
        getContentPane().add(searchBtn);
        searchBtn.setBounds(690, 180, 30, 30);

        jMenu1.setText("File");

        newFileBtn.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        newFileBtn.setText("New File");
        newFileBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newFileBtnActionPerformed(evt);
            }
        });
        jMenu1.add(newFileBtn);
        jMenu1.add(jSeparator1);

        openBtn.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        openBtn.setText("Open");
        openBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openBtnActionPerformed(evt);
            }
        });
        jMenu1.add(openBtn);
        jMenu1.add(jSeparator2);

        saveBtn.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        saveBtn.setText("Save");
        saveBtn.setEnabled(false);
        saveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveBtnActionPerformed(evt);
            }
        });
        jMenu1.add(saveBtn);

        saveAsBtn.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_DOWN_MASK | java.awt.event.InputEvent.CTRL_DOWN_MASK));
        saveAsBtn.setText("Save As");
        saveAsBtn.setEnabled(false);
        saveAsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAsBtnActionPerformed(evt);
            }
        });
        jMenu1.add(saveAsBtn);
        jMenu1.add(jSeparator3);

        jMenuItem4.setText("Exit");
        jMenu1.add(jMenuItem4);

        menuBar.add(jMenu1);

        setJMenuBar(menuBar);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void setData( Object[][] data ) {
        
        this.data.clear();
        this.data.addAll(Arrays.asList(data));
        
    }
    
    private void setHeaders( Object[] headers ) {
        
        this.headers = headers;
        this.model.setColumnIdentifiers(headers);
        
    }
    
    public void isSearching(boolean aFlag) {
        
        this.SEARCHING = aFlag;
        
    }
    
    public Object[] getHeaders() {
        
        return this.headers;
        
    }
    
    public DefaultTableModel getTableModel() {
        
        return this.model;
        
    }
    
    private void tableChangedPerformed( TableModelEvent e ) {
        
        String title = "";
        
        System.out.println(e.getType());
        if ( (!this.SEARCHING && !this.LOADING) || this.ADDING ) {
            
            title = String.format(
                "<html><div style='text-align: center;'><I>* %s</I></div></html>",
                this.fileManager.getFile().getName());
            this.is_unsaved = true;
            
        } else {
            
            title = this.titleLabel.getText();
            
        }
        
        switch (e.getType()) {
            case TableModelEvent.UPDATE:
                this.addRow.setEnabled(true);
                this.searchBtn.setEnabled(true);
                
                if (this.model.editingEnabled) {
                    this.updateData();
                    this.model.setEditingEnabled(false);
                }
                
                break;
            
            case TableModelEvent.INSERT:
                this.titleLabel.setText(title);
                break;
                
            case TableModelEvent.DELETE:
                this.titleLabel.setText(title);                
                break;
                
        }

        if (jTable1.getSelectedRows().length <= 1) {
            this.editContentBtn.setEnabled(false);
        }
        
    }
    
    public void addRowData(Object[] data) {
        
        this.data.add(data);
        this.displayData();
        
    }
    
    public void displayData() {
        
        this.displayData(this.searchFilter, this.searchCol);
        
    }
    
    public void displayData(String pattern, int column) {
        
        this.searchFilter = pattern;
        this.searchCol = column;
        
        this.visibleData.clear();
        this.getTableModel().setRowCount(0);
        
        this.data.forEach( data -> {
            Object[] item = (Object[]) data;
            if (((String) item[column]).contains(pattern)) {
                this.model.addRow(item);
                this.visibleData.add(data);
            }
        });
        
    }    
    
    private void updateData() {
        
        int selectedRow = this.jTable1.getSelectedRow();
        Object[] newObj = this.model.getDataVector().get(selectedRow).toArray();
        Object[] selectedObj = this.visibleData.get(selectedRow);

        if (!Arrays.equals(newObj, selectedObj)) {
            this.data.set(this.data.indexOf(selectedObj), newObj);
            this.displayData();
        }
        
    }
    
    private void save() {
        
        this.save(false);
        
    }
    
    private void save(boolean saveas) {
                
        String dataToSave;

        String headers = "";
        for (int header_index = 0; header_index <= this.headers.length - 1; header_index++) {
            String tail = (header_index == this.headers.length - 1) ? "\n" : "|";
            headers = headers + this.headers[header_index].toString() + tail;
        }

        String data = "";
        for (Object[] d : this.data) {

            for (Object str : d) {
                String tail = (str.equals(d[d.length-1])) ? "\n" : "|";
                data = data + str.toString() + tail;
            }

        }

        dataToSave = headers + data;
        
        if (!this.file.exists() || saveas) {
            
            this.fileChooser.setSelectedFile(file);
            int choice = this.fileChooser.showSaveDialog(this);
            
            if (choice == 0) {
                this.file = this.fileChooser.getSelectedFile();
                this.fileManager.setFile(this.file);
                this.fileManager.save(dataToSave);
                this.titleLabel.setText(this.file.getName());
                this.is_unsaved = false;
            }
            
        } else {
            this.fileManager.save(dataToSave);
            this.is_unsaved = false;
        }
        this.titleLabel.setText(this.fileManager.getFile().getName());
        
    }
    
    private void open_file() {
        
        Window[] windows = Window.getWindows();
        this.LOADING = true;
        String file_contents;
        String[] rows;
        String[][] data;
        File selectedFile;
        
        this.fileChooser.showOpenDialog(this);
        selectedFile = this.fileChooser.getSelectedFile();

        if (null != selectedFile) {

            for (int win_index = 1; win_index < windows.length; win_index++) {
                windows[win_index].dispose();
            }

            this.file = selectedFile;
            this.fileManager.setFile(file);
            this.getTableModel().setRowCount(0);

            file_contents = this.fileManager.load();
            titleLabel.setText(this.fileManager.getFile().getName());

            rows = file_contents.split("\\n");
            data = new String[rows.length][];

            for (int word_index = 0; word_index < rows.length; word_index++) {
                data[word_index] = rows[word_index].split("\\|");
            }

            this.setHeaders(data[0]);
            this.setData(Arrays.copyOfRange(data, 1, rows.length));
            this.displayData();

            this.saveAsBtn.setEnabled(true);
            this.saveBtn.setEnabled(true);
        }

        this.LOADING = false;
        this.is_unsaved = false;
        
    }
    
    private void new_file() {
        
        NewTableDialog tableDialog = new NewTableDialog(this, true);
        tableDialog.setVisible(true);
        
        if (tableDialog.getValue() == 0) {
            this.data.clear();
            this.model.setRowCount(0);
            this.is_unsaved = true;
            System.out.println(Arrays.toString(tableDialog.getHeaders()));
            
            if (tableDialog.getHeaders().length > 0) {
                int counter = 0;
                
                do {
                    
                    String title = (counter == 0) ? "Untitled.txt" : String.format("Untitled_%s.txt", counter);
                    this.file = new File(this.data_path, title);
                    counter ++;
                
                } while (file.exists());
                
                this.fileManager.setFile(this.file);
                this.setHeaders(tableDialog.getHeaders());
                this.titleLabel.setText(file.getName());
                
                this.saveAsBtn.setEnabled(true);
                this.saveBtn.setEnabled(true);
            }
            
        }
        
    }
    
    private void newFileBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newFileBtnActionPerformed

        if (this.is_unsaved) {
            int option = JOptionPane.showConfirmDialog(this, "File is currently not saved.\nSave?", "File Unsaved", JOptionPane.YES_NO_CANCEL_OPTION);
            
            switch (option) {
                case JOptionPane.YES_OPTION:
                    this.save();
                    this.new_file();
                    break;
                
                case JOptionPane.NO_OPTION:
                    this.new_file();
            }
        } else {
            this.new_file();
        }
                
    }//GEN-LAST:event_newFileBtnActionPerformed

    private void addRowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addRowActionPerformed

        this.ADDING = true;
        AddDataDialog addDataDialog = new AddDataDialog(this, true);
        addDataDialog.setVisible(true);
        this.ADDING = false;
        
    }//GEN-LAST:event_addRowActionPerformed

    private void removeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeBtnActionPerformed
        
        int[] selectedRows = jTable1.getSelectedRows();
        
        if (model.getRowCount() <= 0) {
           this.removeBtn.setEnabled(false);
           
        } 
        
        for (int i = selectedRows.length - 1; 0 <= i; i--) {
            int selectedRow = this.jTable1.getSelectedRow();
            Object[] selectedObj = this.visibleData.get(selectedRow);
            this.model.removeRow(selectedRow);
            this.data.remove(selectedObj);
            this.visibleData.remove(selectedObj);
            
        }

        selectedRows = jTable1.getSelectedRows();
        if (selectedRows.length <= 0) {
            this.removeBtn.setEnabled(false);
        }        

    }//GEN-LAST:event_removeBtnActionPerformed

    private void searchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBtnActionPerformed

        if (!SEARCHING) {
            this.SEARCHING = true;
            new SearchDataDialog(this, false).setVisible(true);
        }
        
    }//GEN-LAST:event_searchBtnActionPerformed

    private void editContentBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editContentBtnActionPerformed
        
        this.model.setEditingEnabled(true);
        this.jTable1.editCellAt(this.jTable1.getSelectedRow(), this.jTable1.getSelectedColumn());
        Component editor = jTable1.getEditorComponent();
        
        if (editor != null) {
            editor.requestFocus();
        }
        
    }//GEN-LAST:event_editContentBtnActionPerformed

    private void saveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveBtnActionPerformed

        this.save();
        
    }//GEN-LAST:event_saveBtnActionPerformed

    private void jTable1MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseReleased

        if (jTable1.getSelectedRows().length != 0) {
            this.removeBtn.setEnabled(true);
        }
        
        if (jTable1.getSelectedRows().length > 0 && 1 >= jTable1.getSelectedRows().length) {
            this.editContentBtn.setEnabled(true);
        } else {
            this.editContentBtn.setEnabled(false);
        }
        
    }//GEN-LAST:event_jTable1MouseReleased

    private void openBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openBtnActionPerformed
        
        if (this.is_unsaved) {
            int option = JOptionPane.showConfirmDialog(this, "File is currently not saved.\nSave?", "File Unsaved", JOptionPane.YES_NO_CANCEL_OPTION);
            
            switch (option) {
                case JOptionPane.YES_OPTION:
                    this.save();
                    this.open_file();
                    break;
                
                case JOptionPane.NO_OPTION:
                    this.open_file();
            }
        } else {
            this.open_file();
        }
        
    }//GEN-LAST:event_openBtnActionPerformed

    private void saveAsBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAsBtnActionPerformed
        
        this.save(true);
        
    }//GEN-LAST:event_saveAsBtnActionPerformed

    private void jTable1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable1KeyReleased

        if (this.model.editingEnabled) {
            if (evt.getKeyCode() == 27) {
                this.model.setEditingEnabled(false);
            }
        }
        
    }//GEN-LAST:event_jTable1KeyReleased

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        
        if (this.is_unsaved) {
            int option = JOptionPane.showConfirmDialog(this, "File is not currently saved.\nSave?", "Are you sure?", JOptionPane.YES_NO_CANCEL_OPTION);
            
            switch (option) {
                case JOptionPane.YES_OPTION:
                    this.save(true);
                    System.exit(0);
                    break;
                
                case JOptionPane.NO_OPTION:
                    System.exit(0);
                    break;
            }
            
        } else {
            System.exit(0);
        }
        
    }//GEN-LAST:event_formWindowClosing

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DatabaseManagerInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DatabaseManagerInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DatabaseManagerInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DatabaseManagerInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DatabaseManagerInterface().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addRow;
    private javax.swing.JButton editContentBtn;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JTable jTable1;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem newFileBtn;
    private javax.swing.JMenuItem openBtn;
    private javax.swing.JButton removeBtn;
    private javax.swing.JMenuItem saveAsBtn;
    private javax.swing.JMenuItem saveBtn;
    private javax.swing.JButton searchBtn;
    // End of variables declaration//GEN-END:variables

    private static class CustomTableModel extends DefaultTableModel{
        private boolean editingEnabled = false;
        
        @Override
        public boolean isCellEditable(int row, int column) {
            return editingEnabled;
        }
        
        public void setEditingEnabled(boolean editingEnabled) {
            this.editingEnabled = editingEnabled;
        }
    }
}
